{"mappings":"qhBACA,IAAAA,EAAAC,EAAA,SACA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAMF,SAASC,cAAc,QAkDjC,SAASE,EAAcC,EAAUC,GAEjC,OADsBC,KAAKC,SAAW,GAG7BC,QAAQC,QAAQ,CACrBL,SAAUA,EACVM,MAAOL,IAMIG,QAAQG,OAAO,CACpBP,SAAUA,EACVM,MAAOL,G,CA/DnBO,QAAQC,IAAIX,GACZA,EAAIY,UAAW,EAIff,EAAKgB,iBAAiB,UACtB,SAAsBC,GACpBA,EAAMC,iBACJf,EAAIY,UAAW,EACjBZ,EAAIY,UAAW,EACf,MAAMI,GAAcnB,EAAKW,MAAMS,MACzBC,GAAarB,EAAKM,KAAKc,MACvBE,GAAetB,EAAKuB,OAAOH,MAEjC,IAAK,IAAII,EAAI,EAAGC,EAAON,EAAYK,GAAKF,EAAaE,GAAK,EAAGC,GAASJ,EACpEK,YAAW,KACOtB,EAAcoB,EAAGC,GAEzBE,MAAK,EAACtB,SAAEA,EAAQM,MAAEA,MAExBiB,EAAA9B,GAAS+B,OAAOC,QACd,sBAAsBzB,QAAeM,MAEtC,IAEAoB,OAAM,EAAC1B,SAAEA,EAAQM,MAAEA,MAClBiB,EAAA9B,GAAS+B,OAAOG,QACd,qBAAqB3B,QAAeM,MAErC,IAKFsB,SAAQ,KAEHT,IAAMF,IACRnB,EAAIY,UAAW,EAEff,EAAKkC,Q,GAEP,GACRT,E","sources":["src/js/03-promises.js"],"sourcesContent":["\nimport Notiflix from 'notiflix';\nconst form = document.querySelector(\".form\")\nconst btn = document.querySelector(\"#btn\")\nconsole.log(btn);\nbtn.disabled = false;\n\n\n\nform.addEventListener(\"submit\", handleSubmit)\nfunction handleSubmit(event) {\n  event.preventDefault(); \n    btn.disabled = true;\n  btn.disabled = true;\n  const delayValue = +form.delay.value;\n  const stepValue = +form.step.value;\n  const amountValue = +form.amount.value;\n\n  for (let i = 1, delay =delayValue; i <= amountValue; i += 1, delay += stepValue){\n    setTimeout(() => {\n      const promise = createPromise(i, delay)\n\n      promise.then(({ position, delay }) => {\n        // console.log(` Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          ` Fulfilled promise ${position} in ${delay}ms`,\n\n        );\n      })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            ` Rejected promise ${position} in ${delay}ms`,\n \n          );\n          // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        \n\n        })\n        .finally(() => {\n          // Enable the button when all promises have settled\n          if (i === amountValue) {\n            btn.disabled = false;\n            // Reset the form fields\n            form.reset();\n          }\n        })\n},delay)\n\n}\n\n  \n\n  }\n  function createPromise(position, step) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n  \n    return Promise.resolve({\n      position: position,\n      delay: step\n\n    });\n  }\n  else {\n  \n          return Promise.reject({\n            position: position,\n            delay: step\n          });\n\n    }\n    }\n\n\n\n\n\n\n\n//   if (selectedDates[0].getTime() - options.defaultDate.getTime() < 0) {\n// Notiflix.Notify.failure(\n//   'Please choose a date in the future',\n//   {\n//     timeout: 2000,\n//   },\n// );\n//  startBtn.disabled = true;\n// } else {\n//           startBtn.disabled = false;\n// }\n\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$btn","$47d4ff9957288465$var$createPromise","position","step","Math","random","Promise","resolve","delay","reject","console","log","disabled","addEventListener","event","preventDefault","delayValue","value","stepValue","amountValue","amount","i","delay1","setTimeout","then","$parcel$interopDefault","Notify","success","catch","failure","finally","reset"],"version":3,"file":"03-promises.1e66ce26.js.map"}